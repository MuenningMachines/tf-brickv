#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
brick-flash
Copyright (C) 2013 Jan Sandbrink
Copyright (C) 2012-2016 Matthias Bolte <matthias@tinkerforge.com>

Atmel SAM-BA flash protocol implementation

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public
License along with this program; if not, write to the
Free Software Foundation, Inc., 59 Temple Place - Suite 330,
Boston, MA 02111-1307, USA.
"""

try:
    import argparse
except ImportError:
    print('Error: Requiring Python argparse module')
    exit(1)

try:
    from serial import Serial, SerialException
except ImportError:
    print('Error: Requiring Python serial module')
    exit(2)

import sys
import struct
import time

#### insert samba module here ####

class Progress:
    def __init__(self):
        self.message = ''
        self.value = 0
        self.maximum = 0
        self.first_reset = True

    def print_progress(self):
        if self.maximum != 0:
            sys.stdout.write('\r{0}: {1:>3} %'.format(self.message, int(100.0 * self.value / self.maximum)))
        else:
            sys.stdout.write('\r{0}...'.format(self.message))

        sys.stdout.flush()

    def reset(self, title, maximum):
        if not self.first_reset:
            print('')
        else:
            self.first_reset = False

        self.message = title
        self.value = 0
        self.maximum = maximum
        self.print_progress()

    def update(self, value):
        if value != None:
            self.value = value
            self.print_progress()

    def cancel(self):
        print('')

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Tinkerforge Brick Flash Tool')

    class VersionAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            print('<<VERSION>>')
            exit(0)

    parser.add_argument('-v', '--version', action=VersionAction, nargs=0, help='show version and exit')
    parser.add_argument('-p', '--port', dest='port', required=True, type=str,
                        help='Brick serial port, typically /dev/ttyUSB0 or /dev/ttyACM0')
    parser.add_argument('-f', '--file', dest='file', required=True, type=str,
                        help='Brick firmware file')

    args = parser.parse_args()
    firmware = None

    try:
        with open(args.file, 'rb') as firmware_file:
            firmware = firmware_file.read()
    except IOError as e:
        print("Error: Could not read firmware file '{0}': {1}".format(args.file, e.strerror))
        exit(3)

    progress = Progress()

    try:
        samba = SAMBA(args.port, progress, 'brick-flash')
    except SAMBAException as e:
        print('Error: Could not connect to Brick: {0}'.format(str(e)))
        exit(4)
    except SerialException as e:
        print('Error: {0}'.format(str(e)[0].upper() + str(e)[1:]))
        exit(5)
    except Exception as e:
        print('Error: {0}'.format(str(e)))
        exit(6)

    try:
        samba.flash(firmware, None, False)
    except SAMBARebootError as e:
        samba = None
        progress.cancel()
        print('Firmware successfully written')
        exit(0)
    except SAMBAException as e:
        samba = None
        progress.cancel()
        print('Error: Could not write firmware: {0}'.format(str(e)))
        exit(7)
    except SerialException as e:
        samba = None
        progress.cancel()
        print('Error: Could not write firmware: {0}'.format(str(e)[0].upper() + str(e)[1:]))
        exit(8)
    except Exception as e:
        samba = None
        progress.cancel()
        print('Error: Could not write firmware: {0}'.format(str(e)))
        exit(9)

    samba = None
    progress.cancel()
    print('Firmware successfully written, Brick should restart automatically')
    exit(0)
