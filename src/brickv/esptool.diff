--- esptool.py_orig_32	2021-10-25 09:57:57.000000000 +0200
+++ esptool.py	2022-01-31 14:26:00.108808073 +0100
@@ -1,5 +1,3 @@
-#!/usr/bin/env python
-#
 # ESP8266 & ESP32 family & ESP8684 ROM Bootloader Utility
 # Copyright (C) 2014-2021 Fredrik Ahlberg, Angus Gratton, Espressif Systems (Shanghai) CO LTD, other contributors as noted.
 # https://github.com/espressif/esptool
@@ -31,9 +29,43 @@
 import shlex
 import string
 import struct
-import sys
+import sys as sys_orig
 import time
 import zlib
+from contextlib import contextmanager
+
+print_orig = print
+print_callback_ref = [print_orig]
+firmware_ref = [None]
+
+def print(*args, end='\n'):
+    print_callback = print_callback_ref[0]
+
+    if print_callback != None:
+        print_callback(*args, end=end)
+
+class StdoutWrapper:
+    def flush(self):
+        pass
+
+    def isatty(self):
+        return False
+
+stdout_wrapper = StdoutWrapper()
+
+class SysWrapper:
+    def __getattribute__(self, name):
+        if name == 'stdout':
+            return stdout_wrapper
+
+        return getattr(sys_orig, name)
+
+sys = SysWrapper()
+
+@contextmanager
+def open_firmware():
+    yield io.BytesIO(firmware_ref[0])
+
 
 try:
     import serial
@@ -2543,7 +2575,7 @@
         Returns a BaseFirmwareImage subclass, either ESP8266ROMFirmwareImage (v1) or ESP8266V2FirmwareImage (v2).
     """
     chip = chip.lower().replace("-", "")
-    with open(filename, 'rb') as f:
+    with open_firmware() if filename == '[firmware]' else open(filename, 'rb') as f:
         if chip == 'esp32':
             return ESP32FirmwareImage(f)
         elif chip == "esp32s2":
@@ -4185,6 +4217,77 @@
         print('Api_Version: {}'.format(si["api_version"]))
 
 
+def check_efuses(esp, args):
+    blocks = [[], [], [], []]
+    blocks_bytes = [[], [], [], []]
+
+    for n in range(7):
+        efuse = esp.read_efuse(n)
+
+        blocks[0].append(efuse)
+        blocks_bytes[0] += list(efuse.to_bytes(4, 'little'))
+
+    for n in range(3 * 8):
+        efuse = esp.read_efuse(14 + n)
+
+        blocks[1 + n // 8].append(efuse)
+        blocks_bytes[1 + n // 8] += list(efuse.to_bytes(4, 'little'))
+
+    blocks_bytes_redacted = copy.deepcopy(blocks_bytes)
+
+    def redact(b, s, e):
+        assert s < e
+
+        b[s:e] = [None] * (e - s)
+
+    redact(blocks_bytes_redacted[3], 7, 10)
+    redact(blocks_bytes_redacted[3], 10, 12)
+    redact(blocks_bytes_redacted[3], 20, 21)
+    redact(blocks_bytes_redacted[3], 21, 23)
+    redact(blocks_bytes_redacted[3], 24, 25)
+    redact(blocks_bytes_redacted[3], 25, 28)
+
+    for b in range(4):
+        print('eFuse BLK{0}: {1}'.format(b, ' '.join([''.join('{0:02x}'.format(x) if x != None else 'xx' for x in blocks_bytes_redacted[b][i * 4:i * 4 + 4]) for i in range(8)])))
+
+    if any(b != 0 for b in blocks[1]):
+        print('WARNING: eFuse BLK1 is not empty')
+        return
+
+    if any(b != 0 for b in blocks[2]):
+        print('WARNING: eFuse BLK2 is not empty')
+        return
+
+    if blocks[0][4] & 0x0001c000 != 0x0001c000:
+        print('WARNING: Flash voltage eFuse in BLK0 is not set correctly')
+        return
+
+    """
+    from brickv.bindings.ip_connection import IPConnection, base58encode, base58decode, BASE58
+    block3_bytes = b''.join([r.to_bytes(4, 'little') for r in blocks[3]])
+    def block3_to_payload(block3):
+        passphrase_bytes_list = [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]]
+        passphrase_bytes_list[0] = block3[7:10]
+        passphrase_bytes_list[1][0:2] = block3[10:12]
+        passphrase_bytes_list[1][2] = block3[20]
+        passphrase_bytes_list[2][0:2] = block3[21:23]
+        passphrase_bytes_list[2][2] = block3[24]
+        passphrase_bytes_list[3] = block3[25:28]
+        uid_bytes = bytes(block3[28:32])
+        passphrase_bytes_list = [bytes(chunk) for chunk in passphrase_bytes_list]
+        passphrase = [base58encode(int.from_bytes(chunk, 'little')) for chunk in passphrase_bytes_list]
+        uid = base58encode(int.from_bytes(uid_bytes, 'little'))
+        passphrase = '-'.join(passphrase)
+        return passphrase, uid
+
+    passphrase, uid = block3_to_payload(block3_bytes)
+    print('Passphrase:', passphrase)
+    print('UID:', uid)
+    """
+
+    print('eFuses are configured correctly')
+
+
 def merge_bin(args):
     try:
         chip_class = _chip_to_rom_loader(args.chip)
@@ -4496,6 +4599,8 @@
 
     subparsers.add_parser('get_security_info', help='Get some security-related data')
 
+    subparsers.add_parser('check_efuses')
+
     # internal sanity check - every operation matches a module function of the same name
     for operation in subparsers.choices.keys():
         assert operation in globals(), "%s should be a module function" % operation
@@ -4737,7 +4842,10 @@
             except ValueError:
                 raise argparse.ArgumentError(self, 'Address "%s" must be a number' % values[i])
             try:
-                argfile = open(values[i + 1], 'rb')
+                if values[i + 1] == '[firmware]':
+                    argfile = io.BytesIO(firmware_ref[0])
+                else:
+                    argfile = open(values[i + 1], 'rb')
             except IOError as e:
                 raise argparse.ArgumentError(self, e)
             except IndexError:
